import traceback
import warnings
warnings.filterwarnings('ignore') 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
from PIL import Image
import torchvision
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
import torch.optim as optim
import torch.nn.functional as F
import colorama
from colorama import Fore, Style
from flask import Flask, request, jsonify
from PIL import Image
import io
import base64
from flask_cors import CORS

app = Flask(__name__)
# for moving data into GPU (if available)

CORS(app)  # CORS'u tüm istekler için etkinleştirir
def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available:
        return torch.device("cuda")
    else:
        return torch.device("cpu")

# for moving data to device (CPU or GPU)
def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)
# for loading in the device (GPU if available else CPU)
class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dataloader, device):
        self.dataloader = dataloader
        self.device = device
        
    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dataloader:
            yield to_device(b, self.device)
        
    def __len__(self):
        """Number of batches"""
        return len(self.dataloader)

device = get_default_device()
device

test_dir = "C:\\Users\\yildi\\Desktop\\archive1\\test"

test = ImageFolder(test_dir, transform=transforms.ToTensor())
test_images = sorted(os.listdir(test_dir + '/test'))
print(Fore.GREEN)
print(test_images)
print(len(test_images))
from torch.utils.data import DataLoader

# Test veri kümesini tanımlayın

# DataLoader oluşturun
test_loader = DataLoader(test_images, batch_size=32, shuffle=False)

# Test veri kümesini GPU'ya taşıyın
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
test_loader = DeviceDataLoader(test_loader, device)
# for calculating the accuracy
def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))
class ImageClassificationBase(nn.Module):
    
    def training_step(self, batch):
        images, labels = batch 
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss
    
    def validation_step(self, batch):
        images, labels = batch 
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}
        
    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}
    
    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))

# convolution block with BatchNormalization
def ConvBlock(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
             nn.BatchNorm2d(out_channels),
             nn.ReLU(inplace=True)]
    if pool:
        layers.append(nn.MaxPool2d(4))
    return nn.Sequential(*layers)

# resnet architecture 
class CNN_NeuralNet(ImageClassificationBase):
    def __init__(self, in_channels, num_diseases):
        super().__init__()
        
        self.conv1 = ConvBlock(in_channels, 64)
        self.conv2 = ConvBlock(64, 128, pool=True) 
        self.res1 = nn.Sequential(ConvBlock(128, 128), ConvBlock(128, 128))
        
        self.conv3 = ConvBlock(128, 256, pool=True) 
        self.conv4 = ConvBlock(256, 512, pool=True)
        #self.conv5 = ConvBlock(256, 256, pool=True)
        #self.conv6 = ConvBlock(256, 512, pool=True)
        #self.conv7 = ConvBlock(512, 512, pool=True)
        
        self.res2 = nn.Sequential(ConvBlock(512, 512), ConvBlock(512, 512))
        self.classifier = nn.Sequential(nn.MaxPool2d(4),
                                       nn.Flatten(),
                                       nn.Linear(512, num_diseases))
        
    def forward(self, x): # x is the loaded batch
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        #out = self.conv5(out)
        #out = self.conv6(out)
        #out = self.conv7(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out        
# Sınıf etiketlerine karşılık gelen sınıf ismini yazdırın
labels = [
   'Ahududu___Sağlıklı',
    'Biber___Bakteriyel leke hastalığı',
    'Biber___Sağlıklı',
    'Domates___Bakteriyel leke hastalığı',
    'Domates___Erken yaprak yanıklığı',
    'Domates___Geç yaprak yanıklığı',
    'Domates___Hedef yaprak lekesi',
    'Domates___Sarı Yaprak Kıvırcıklığı Virüsü',
    'Domates___Sağlıklı',
    'Domates___Septoria yaprak lekesi',
    'Domates___Yaprak küfü',
    'Domates___mozaik virüsü',
    'Domates___Örümcek akarı hastalığı',
    'Elma___Elma kanseri',
    'Elma___Kara çürüklük',
    'Elma___Sağlıklı',
    'Elma___Sedir elma pası hastalığı',
    'Kabak___Külleme hastalığı',
    'Kiraz___Külleme hastalığı',
    'Kiraz___Sağlıklı',
    'Mısır___Gri_yaprak_lekesi',
    'Mısır___Kuzey Yaprak Yanıklığı',
    'Mısır___Sağlıklı',
    'Mısır___Yaygın pas hastalığı',
    'Patates___Erken yaprak yanıklığı',
    'Patates___Geç yaprak yanıklığı',
    'Patates___Sağlıklı',
    'Portakal___Huanglongbing (Turunçgil yeşilliği)',
    'Soya___Sağlıklı',
    'Yabanmersini___Sağlıklı',
    'Çilek___Sağlıklı',
    'Çilek___Yaprak kızarması',
    'Üzüm___Kara kızamık',
    'Üzüm___Kara çürük hastalığı',
    'Üzüm___Sağlıklı',
    'Üzüm___Yaprak Yanıklığı',
    'Şeftali___Bakteriyel leke hastalığı',
    'Şeftali___Sağlıklı'
]
in_channels=3
num_diseases = len(labels)
model = CNN_NeuralNet(in_channels, num_diseases)

model.load_state_dict(torch.load('Egitilmis_model_agirligi.pth'))  # Ağırlıkları yükleyin
model.eval()  # Modeli değerlendirme moduna alın

# Cihaz seçimi
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Modeli ve veriyi cihazda işleyin
model = to_device(model, device)

def predict_image(img, model):
    xb = to_device(img.unsqueeze(0), device)  # Girişi GPU'ya taşı
    print("Input device:", xb.device)  # Burada xb'nin cihazını kontrol edebiliriz
    yb = model(xb)  # Modelden tahmin al
    _, preds = torch.max(yb, dim=1)
    # İndeksi etiketin ismine dönüştür
    return labels[preds[0].item()]  # preds[0] modelin ilk (tek) tahminini verir
def to_device(data, device):
    if isinstance(data, (list, tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device)

@app.route('/predict', methods=['POST'])
def predict_from_flutter():
    try:
        data = request.get_json()
        image_base64 = data.get("image")  # "image" key altında base64 kodlu veri

        if not image_base64:
            return jsonify({"error": "Görüntü verisi eksik!"}), 400

        # Base64 verisini çöz ve bir PIL Image oluştur
        image_data = base64.b64decode(image_base64)
        image = Image.open(io.BytesIO(image_data)).convert('RGB')

        # Görüntüyü modele uygun formata çevir
        transformed_img = transforms.ToTensor()(image)

        # Tahmin yap
        prediction = predict_image(transformed_img, model)
        print("prediction"+prediction)
        # JSON formatına dönüştür
        if isinstance(prediction, (list, dict, str, int, float)):
            response = {"prediction": prediction}
        else:
            response = {"prediction": str(prediction)}

        return jsonify(response), 200

    except Exception as e:
        return jsonify({"error": str(e), "traceback": traceback.format_exc()}), 500

    except Exception as e:
        # Hata durumunda hata mesajı döndür
        return jsonify({"error": str(e), "traceback": traceback.format_exc()}), 500

if __name__ == "__main__":
    app.run(host="192.168.241.125", port=6000, debug=True)
